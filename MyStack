public class MyStack<Item> {
    private Item[] list;
    private int size = 0;
    private final int DEFAULT_CAPACITY = 10;

    public MyStack(int capacity) {
        if(capacity <=0 ){
            throw new IllegalArgumentException("bad capacity "+ capacity);
        }
        list = (Item[]) new Object[capacity];
    }

    public MyStack() {
        list = (Item[]) new Object[DEFAULT_CAPACITY];
    }

    public void push(Item item){
        if(isFull()){
            throw new StackOverflowError("stack is full");
        }
        list[size] = item;
        size++;
    }

    public Item pop(){
        Item temp = peek();
        size--;
        list[size] = null;
        return temp;
    }

    public Item peek(){
        if (isEmpty()){
            throw new StackOverflowError("stack is empty ");
        }
        return list[size-1];
    }

    public int size() {
        return size;
    }

    public boolean isEmpty(){
        return size == 0;
    }

    public boolean isFull(){
        return size == list.length;
    }


    public void resize(int newSize){
        if (newSize > list.length) {
            Item[] tempArr = (Item[]) new Object[newSize];
            System.arraycopy(list, 0, tempArr, 0, list.length);
            list = tempArr;
        } else if (newSize < list.length) {
            int gap = list.length - newSize;

            if (gap > 0 && newSize >= size ) {
                Item[] tempArr = (Item[]) new Object[newSize];
                System.arraycopy(list, 0, tempArr, 0, list.length-gap);
                list = tempArr;
            } else if (gap > 0 && newSize < size) {
                throw new IndexOutOfBoundsException("new capacity is less than current size!");
            }
        }
    }
}
